-- Enhanced Turtle Miner v2.1
-- Modes: quarry, bore, branch
-- Place fuel chest (for auto-refuel) to the left, drop-off chest behind.

-- Initialize
term.clear()
term.setCursorPos(1,1)
io.write("Choose mode [quarry/bore/branch]: ")
local mode = io.read():lower()

-- Common prompts
io.write("Rows (X dimension): ")
local rows = tonumber(io.read()) or error("Invalid number")
io.write("Columns (Z dimension): ")
local columns = tonumber(io.read()) or error("Invalid number")

-- Quarry-specific prompt
defaultY = 2
local iniY = defaultY
if mode == "quarry" then
  io.write("Starting Y level: ")
  iniY = tonumber(io.read()) or error("Invalid Y level")
end

-- Branch-specific prompts
local spacing, branchLength, floors = 0,0,1
if mode == "branch" then
  io.write("Branch spacing (blocks between tunnels): ")
  spacing = tonumber(io.read()) or error("Invalid spacing")
  io.write("Branch length: ")
  branchLength = tonumber(io.read()) or error("Invalid length")
  io.write("Number of floors: ")
  floors = tonumber(io.read()) or error("Invalid number")
end

-- Clear screen before starting operations
term.clear()
term.setCursorPos(1,1)

-- State tracking
local posX, posY, posZ, rotation = 0, 0, 0, 0
local fullSlots = 0

-- Refuel if low
function refuelIfNeeded()
  if turtle.getFuelLevel() < 100 then
    turtle.turnLeft()
    while turtle.suck() do end
    turtle.turnRight()
  end
end

-- Manage inventory: drop or offload when full
function manageInventory()
  fullSlots = 0
  for i=1,16 do
    turtle.select(i)
    if turtle.getItemCount() > 0 then fullSlots = fullSlots + 1 end
  end
  if fullSlots == 16 then
    -- return to drop chest (behind start)
    turtle.turnLeft(); turtle.turnLeft()
    for i=1,16 do turtle.select(i); turtle.drop() end
    turtle.turnLeft(); turtle.turnLeft()
  end
end

-- Dig forward safely
function digForward()
  refuelIfNeeded()
  while turtle.detect() do turtle.dig() end
  turtle.forward()
  manageInventory()
end

-- Quarry and bore implementations should go here...

-- Branch mining implementation
function branchMine()
  -- Descend to starting depth (if above default)
  for i=1, defaultY-1 do
    if turtle.down() then posY = posY - 1 end
  end

  for floor=1, floors do
    -- Dig main corridor
    for i=1, columns do digForward() end

    -- Branch out at intervals
    for dist=spacing, columns, spacing do
      -- Move back to branch start
      for step=1, spacing do turtle.back() end
      turtle.turnRight()
      -- Mine branch
      for j=1, branchLength do digForward() end
      -- Return to corridor
      turtle.turnLeft() turtle.turnLeft()
      for j=1, branchLength do digForward() end
      turtle.turnRight()
    end

    -- Move down/up to next floor
    if floor < floors then
      turtle.turnLeft()
      if turtle.down() then posY = posY - 1 end
      turtle.turnRight()
    end
  end
end

-- Main execution
if mode == "branch" then
  branchMine()
elseif mode == "quarry" then
  quarry()
else
  bore()
end

print("Mining operation complete!")
