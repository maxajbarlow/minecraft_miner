-- TURTLE MINER SCRIPT
-- Max's Ultimate Multi-Layer Checkerboard Quarry Bot

-- === CONFIGURATION ===
local DEFAULT_X = 100
local DEFAULT_Y = 100
local DEFAULT_LAYERS = 10

local FUEL_SLOT = 1
local CHEST_SLOT = 15
local TORCH_SLOT = 16
local TORCH_SPACING = 9

local WHITELIST = {
  ["minecraft:coal_ore"] = true,
  ["minecraft:iron_ore"] = true,
  ["minecraft:gold_ore"] = true,
  ["minecraft:diamond_ore"] = true,
  ["minecraft:redstone_ore"] = true,
  ["minecraft:lapis_ore"] = false,
  ["minecraft:emerald_ore"] = true,

  -- Tech mod ores (disabled by default, set to true to enable)
  ["mekanism:osmium_ore"] = true,
  ["mekanism:lead_ore"] = true,
  ["mekanism:tin_ore"] = true,
  ["mekanism:uranium_ore"] = false,
  ["thermal:tin_ore"] = false,
  ["thermal:silver_ore"] = false,
  ["thermal:lead_ore"] = false,
  ["thermal:nickel_ore"] = false,
  ["create:zinc_ore"] = false,
  ["immersiveengineering:aluminum_ore"] = false
}

-- === STATE ===
local pos = {x = 0, y = 0, z = 0, face = 0}
local currentLayer, currentRow, currentCol = 1, 1, 1
local stepCounter = 0

-- === UTILITY FUNCTIONS ===
function logCoords()
  print("❌ TURTLE FAILED!")
  print("X: " .. pos.x .. ", Y: " .. pos.y .. ", Z: " .. pos.z)
  print("At shaft: Layer " .. currentLayer .. ", Row " .. currentRow .. ", Col " .. currentCol)
end

function isWhitelisted(name)
  return WHITELIST[name] == true
end

function faceDirection(dir)
  while pos.face ~= dir do
    turtle.turnRight()
    pos.face = (pos.face + 1) % 4
  end
end

function moveForwardSafe()
  refuelIfNeeded()
  while not turtle.forward() do turtle.dig() sleep(0.2) end
  if pos.face == 0 then pos.y = pos.y + 1
  elseif pos.face == 1 then pos.x = pos.x + 1
  elseif pos.face == 2 then pos.y = pos.y - 1
  elseif pos.face == 3 then pos.x = pos.x - 1 end
  stepCounter = stepCounter + 1
  placeTorchIfNeeded()
end

function moveBackSafe()
  refuelIfNeeded()
  while not turtle.back() do turtle.turnLeft() turtle.turnLeft() turtle.dig() turtle.turnRight() turtle.turnRight() sleep(0.2) end
  if pos.face == 0 then pos.y = pos.y - 1
  elseif pos.face == 1 then pos.x = pos.x - 1
  elseif pos.face == 2 then pos.y = pos.y + 1
  elseif pos.face == 3 then pos.x = pos.x + 1 end
end

function moveUpSafe()
  refuelIfNeeded()
  while not turtle.up() do turtle.digUp() sleep(0.2) end
  pos.z = pos.z - 1
end

function moveDownSafe()
  refuelIfNeeded()
  while not turtle.down() do turtle.digDown() sleep(0.2) end
  pos.z = pos.z + 1
end

function turnLeft() turtle.turnLeft() pos.face = (pos.face - 1) % 4 if pos.face < 0 then pos.face = 3 end end
function turnRight() turtle.turnRight() pos.face = (pos.face + 1) % 4 end

function isInventoryFull()
  for i = 2, 16 do if turtle.getItemCount(i) == 0 then return false end end
  return true
end

function refuelIfNeeded()
  if turtle.getFuelLevel() < 100 then
    turtle.select(FUEL_SLOT)
    if not turtle.refuel(1) then
      print("Insert fuel in slot 1 and press Enter...")
      io.read()
    end
  end
end

function moveCoalToSlot1()
  for i = 2, 16 do
    local item = turtle.getItemDetail(i)
    if item and item.name == "minecraft:coal" then
      turtle.select(i)
      turtle.transferTo(FUEL_SLOT)
    end
  end
end

function moveTorchesToSlot16()
  for i = 1, 15 do
    local item = turtle.getItemDetail(i)
    if item and item.name:find("torch") then
      turtle.select(i)
      turtle.transferTo(TORCH_SLOT)
      break
    end
  end
end

function moveChestsToSlot15()
  for i = 1, 14 do
    local item = turtle.getItemDetail(i)
    if item and item.name:find("chest") then
      turtle.select(i)
      turtle.transferTo(CHEST_SLOT)
      break
    end
  end
end

function placeTorchIfNeeded()
  if stepCounter >= TORCH_SPACING then
    local current = turtle.getSelectedSlot()
    turtle.select(TORCH_SLOT)
    local item = turtle.getItemDetail()
    if not item then returnToChest("No torches") end
    if item.name:find("torch") then
      turtle.placeDown()
      stepCounter = 0
    end
    turtle.select(current)
  end
end

function inspectAndDigIfWhitelisted(inspectFn, digFn)
  local success, data = inspectFn()
  if success and isWhitelisted(data.name) then
    digFn()
    moveCoalToSlot1()
  end
end

function checkAllSides()
  inspectAndDigIfWhitelisted(turtle.inspect, turtle.dig)
  inspectAndDigIfWhitelisted(turtle.inspectUp, turtle.digUp)
  inspectAndDigIfWhitelisted(turtle.inspectDown, turtle.digDown)
  turnLeft() inspectAndDigIfWhitelisted(turtle.inspect, turtle.dig) turnRight()
  turnRight() inspectAndDigIfWhitelisted(turtle.inspect, turtle.dig) turnLeft()
  turnLeft() turnLeft() inspectAndDigIfWhitelisted(turtle.inspect, turtle.dig) turnRight() turnRight()
end

function dropInventory()
  turnLeft() turnLeft()
  for i = 2, 16 do turtle.select(i) turtle.drop() end
  turtle.select(1)
  turnRight() turnRight()
end

function returnToChest(reason)
  print("Returning to chest: " .. reason)
  local saved = {x = pos.x, y = pos.y, z = pos.z, face = pos.face}
  faceDirection(2) while pos.y > 0 do moveForwardSafe() end
  faceDirection(3) while pos.x > 0 do moveForwardSafe() end
  while pos.z > 0 do moveUpSafe() end
  faceDirection(2)
  dropInventory()
  refuelIfNeeded()
  moveChestsToSlot15()
  moveTorchesToSlot16()
  resumeFrom(saved)
end

function resumeFrom(p)
  while pos.z < p.z do moveDownSafe() end
  faceDirection(p.x > pos.x and 1 or 3)
  while pos.x ~= p.x do moveForwardSafe() end
  faceDirection(p.y > pos.y and 0 or 2)
  while pos.y ~= p.y do moveForwardSafe() end
  while pos.face ~= p.face do turnRight() end
end

function placeLayerChest()
  turtle.select(CHEST_SLOT)
  local item = turtle.getItemDetail()
  if not item or not item.name:find("chest") then returnToChest("Out of chests") end
  turnLeft() turnLeft()
  turtle.place()
  dropInventory()
  turnRight() turnRight()
end

function mine2x2Shaft()
  for dy = 0, 1 do
    for dx = 0, 1 do
      if dx == 1 then turnRight() moveForwardSafe() turnLeft() end
      if dy == 1 then moveForwardSafe() end
      checkAllSides()
    end
  end
  moveBackSafe() turnLeft() moveBackSafe() turnRight()
end

function skipToNextShaft() turnRight() for i = 1, 3 do moveForwardSafe() end turnLeft() end
function offsetStart() for i = 1, 3 do moveForwardSafe() end end
function returnFromOffset() turnLeft() for i = 1, 3 do moveBackSafe() end turnRight() end

function runLayeredQuarry(cols, rows, layers)
  for layer = 1, layers do
    currentLayer = layer
    print("Starting layer " .. layer)
    if layer % 2 == 1 then offsetStart() end

    for row = 1, rows do
      currentRow = row
      for col = 1, cols do
        currentCol = col
        mine2x2Shaft()
        if col < cols then skipToNextShaft() end
        if isInventoryFull() then returnToChest("Inventory full") end
      end
      if row < rows then
        turnRight() for i = 1, 3 do moveForwardSafe() end turnLeft()
        turnLeft() for i = 1, (cols - 1) * 3 do moveForwardSafe() end turnRight()
      end
    end

    if layer % 2 == 1 then returnFromOffset() end
    placeLayerChest()
    if layer < layers then moveDownSafe() end
  end
end

-- === MAIN ===
print("Use default 100x100x10 mine? (y/n)")
local input = io.read()
local cols, rows, layers = DEFAULT_X, DEFAULT_Y, DEFAULT_LAYERS
if input:lower() ~= "y" and input:lower() ~= "yes" then
  print("Number of shafts in X direction:")
  cols = tonumber(io.read())
  print("Number of shafts in Y direction:")
  rows = tonumber(io.read())
  print("Number of layers:")
  layers = tonumber(io.read())
end

moveCoalToSlot1()
moveTorchesToSlot16()
moveChestsToSlot15()
refuelIfNeeded()

local success, err = pcall(function()
  runLayeredQuarry(cols, rows, layers)
end)

if not success then
  logCoords()
  error(err)
end

print("✅ Mining complete.")
