-- TURTLE MINER SCRIPT
-- Max's Ultimate Multi-Layer Checkerboard Quarry Bot with Save/Resume, Vein Tracing, and Beacon Detection

-- === SELF-UPDATER ===
local UPDATE_URL = "https://raw.githubusercontent.com/maxajbarlow/minecraft_miner/refs/heads/main/minerMK1.lua"
local SCRIPT_NAME = "startup.lua"

local function notify(msg)
  print(msg)
end

function selfUpdate()
  notify("Checking for updates...")
  local response = http.get(UPDATE_URL)
  if not response then
    notify("Update check failed.")
    return
  end

  local remote = response.readAll()
  response.close()

  if fs.exists(SCRIPT_NAME) then
    local current = fs.open(SCRIPT_NAME, "r")
    local localContent = current.readAll()
    current.close()
    if localContent == remote then
      notify("No update needed.")
      return
    end
  end

  notify("New version found. Updating...")
  local file = fs.open(SCRIPT_NAME, "w")
  file.write(remote)
  file.close()
  notify("Script updated. Rebooting...")
  os.reboot()
end

if http then selfUpdate() else notify("HTTP disabled. Skipping update.") end

-- === CONFIGURATION ===
local DEFAULT_X = 100
local DEFAULT_Y = 100
local DEFAULT_LAYERS = 10

local FUEL_SLOT = 1
local CHEST_SLOT = 15
local TORCH_SLOT = 16
local TORCH_SPACING = 9
local SAVE_FILE = "miner_state.txt"

local ENABLE_VEIN_TRACE = true
local VEIN_TRACE_RADIUS = 1

local WHITELIST = {
  ["minecraft:coal_ore"] = true,
  ["minecraft:iron_ore"] = true,
  ["minecraft:gold_ore"] = true,
  ["minecraft:diamond_ore"] = true,
  ["minecraft:redstone_ore"] = true,
  ["minecraft:lapis_ore"] = false,
  ["minecraft:emerald_ore"] = true,
  ["minecraft:copper_ore"] = false,
  ["mekanism:osmium_ore"] = true,
  ["mekanism:lead_ore"] = true,
  ["mekanism:tin_ore"] = true,
  ["mekanism:uranium_ore"] = false,
  ["thermal:tin_ore"] = false,
  ["thermal:silver_ore"] = false,
  ["thermal:lead_ore"] = false,
  ["thermal:nickel_ore"] = false,
  ["create:zinc_ore"] = false,
  ["immersiveengineering:aluminum_ore"] = false
}

-- === STATE ===
local pos = {x = 0, y = 0, z = 0, face = 0}
local currentLayer, currentRow, currentCol = 1, 1, 1
local stepCounter = 0
local surfaceZ = pos.z
local hasteDetected = false
local fuelNotified = false

-- === HELPERS ===
function saveState()
  local f = fs.open(SAVE_FILE, "w")
  f.write(textutils.serialize({pos = pos, layer = currentLayer, row = currentRow, col = currentCol}))
  f.close()
end

function loadState()
  if fs.exists(SAVE_FILE) then
    local f = fs.open(SAVE_FILE, "r")
    local data = textutils.unserialize(f.readAll())
    f.close()
    pos = data.pos
    currentLayer = data.layer
    currentRow = data.row
    currentCol = data.col
    return true
  end
  return false
end

function checkBeaconEffect()
  local effects = turtle.getFuelLimit and {} or nil
  if effects then
    for _, e in pairs(effects) do
      if e == "haste" then
        hasteDetected = true
        notify("Haste effect detected")
      end
    end
  end
end

function digWithHaste(digFn)
  repeat
    digFn()
    sleep(hasteDetected and 0.05 or 0.2)
  until not digFn()
end

function traceVein(depth)
  if not ENABLE_VEIN_TRACE or (depth or 0) > 10 then return end
  local directions = {
    { inspect = turtle.inspect, dig = turtle.dig },
    { inspect = turtle.inspectUp, dig = turtle.digUp },
    { inspect = turtle.inspectDown, dig = turtle.digDown },
  }
  for _, dir in ipairs(directions) do
    local success, data = dir.inspect()
    if success and data.name and isWhitelisted(data.name) then
      digWithHaste(dir.dig)
      traceVein((depth or 0) + 1)
    end
  end
end
