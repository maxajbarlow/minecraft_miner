-- Enhanced Turtle Miner v2.0
-- Modes: quarry, bore, branch
-- Place fuel chest (for auto-refuel) to the left, drop-off chest behind.

-- Initialize
term.clear()
term.setCursorPos(1,1)
io.write("Choose mode [quarry/bore/branch]: ")
local mode = io.read():lower()

-- Common prompts
io.write("Rows (X dimension): ")
local rows = tonumber(io.read()) or error("Invalid number")
io.write("Columns (Z dimension): ")
local columns = tonumber(io.read()) or error("Invalid number")

-- Quarry-specific prompt
defaultY = 2
local iniY = defaultY
if mode == "quarry" then
  io.write("Starting Y level: ")
  iniY = tonumber(io.read()) or error("Invalid Y level")
end

-- Branch-specific prompts
local spacing, branchLength, floors = 0,0,1
if mode == "branch" then
  io.write("Branch spacing (blocks between tunnels): ")
  spacing = tonumber(io.read()) or error("Invalid spacing")
  io.write("Branch length: ")
  branchLength = tonumber(io.read()) or error("Invalid length")
  io.write("Number of floors: ")
  floors = tonumber(io.read()) or 1
end

io.clear()

-- State
local posX, posY, posZ, rotation = 0, 0, 0, 0
local fullSlots = 0

-- Utility functions
function refuelIfNeeded()
  if turtle.getFuelLevel() < 100 then
    turtle.turnLeft()
    repeat turtle.suck() until turtle.getFuelLevel() > 500
    turtle.turnRight()
  end
end

function manageInventory()
  -- drop garbage or offload when full
  fullSlots = 0
  for i=1,16 do
    turtle.select(i)
    if turtle.getItemCount()>0 then fullSlots = fullSlots + 1 end
  end
  if fullSlots == 16 then
    -- return to chest, drop all
    turtle.turnLeft(); turtle.turnLeft()
    for i=1,16 do turtle.select(i); turtle.drop() end
    turtle.turnLeft(); turtle.turnLeft()
  end
end

function digForward()
  refuelIfNeeded()
  while turtle.detect() do turtle.dig() end
  turtle.forward()
  manageInventory()
end

-- Quarry / Bore functions omitted for brevity...

-- Branch mining function
function branchMine()
  -- Descend to starting level if needed
  for i=1, defaultY-1 do if turtle.down() then posY=posY-1 end end

  for floor=1, floors do
    -- dig trunk corridor
    for i=1, columns do digForward() end
    -- create side branches along corridor
    for distance=spacing, columns, spacing do
      -- move to branch start
      turtle.back(spacing)
      turtle.turnRight()
      -- dig branch
      for j=1, branchLength do digForward() end
      -- return to trunk
      turtle.turnLeft(); turtle.turnLeft()
      for j=1, branchLength do digForward() end
      turtle.turnRight()
    end
    -- prepare next floor
    if floor < floors then
      turtle.turnLeft()
      if turtle.down() then posY=posY-1 end
      turtle.turnRight()
    end
  end
end

-- Main
if mode == "branch" then
  branchMine()
else
  -- call existing quarry()/bore() functions
  if mode == "quarry" then quarry() else bore() end
end

print("Mining operation complete!")
